---
import { Image } from "astro:assets";
import myWork from "~/assets/work/my-work-mobile.webp";
---

<div id="work-mobile" class="relative z-10 block min-h-[200vh] md:hidden">
  <div
    class="sticky"
    style="top: calc((max(-1704px, (-1704/767 * 100vw)) + 100vh)/2);"
  >
    <div class="flex w-full justify-center">
      <div class="w-full">
        <div class="h-full w-full overflow-hidden">
          <div
            id="work-mobile__scale-object"
            class="left-0 top-0 z-10 flex h-full w-full scale-110 transform flex-col items-center transition-transform will-change-transform"
          >
            <Image src={myWork} alt="My Work" width={767} height={1704} />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let initialized = false;

  function debounce(func: () => void, wait: number) {
    let timeout: number;
    return () => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        func();
      }, wait);
    };
  }

  function initScrollHandler() {
    const myWorkSection = document.getElementById("work-mobile");
    const myWorkSectionScaleObj = document.getElementById(
      "work-mobile__scale-object",
    );
    let wasInViewport = false;
    let coords: ReturnType<typeof getCoords>;

    function getCoords(elem: HTMLElement) {
      // crossbrowser version
      var box = elem.getBoundingClientRect();

      var body = document.body;
      var docEl = document.documentElement;

      var scrollTop = window.scrollY || docEl.scrollTop || body.scrollTop;
      var scrollLeft = window.scrollX || docEl.scrollLeft || body.scrollLeft;

      var clientTop = docEl.clientTop || body.clientTop || 0;
      var clientLeft = docEl.clientLeft || body.clientLeft || 0;

      var top = box.top + scrollTop - clientTop;
      var left = box.left + scrollLeft - clientLeft;

      return { top: Math.round(top), left: Math.round(left) };
    }

    document.addEventListener("DOMContentLoaded", () => {
      if (!myWorkSection) return;
      coords = getCoords(myWorkSection);
    });

    function calculate() {
      if (!coords || !myWorkSectionScaleObj) return;
      const vh = window.innerHeight / 100;
      const currentScroll = document.documentElement.scrollTop;
      const start = coords.top;
      const stop = coords.top + 200 * vh;
      if (currentScroll > start && currentScroll < stop) {
        const scale = Math.max(1.1 - (currentScroll - start) / 300, 0.5);
        myWorkSectionScaleObj.style.transform = `scale(${scale})`;
        wasInViewport = true;
      } else if (wasInViewport) {
        if (currentScroll <= start) {
          myWorkSectionScaleObj.style.transform = "";
        } else {
          myWorkSectionScaleObj.style.transform = "scale(0.5)";
        }
        wasInViewport = false;
      }
    }

    const debouncedCalculate = debounce(calculate, 15);

    document.addEventListener("scroll", debouncedCalculate);

    initialized = true;
  }

  initScrollHandler();

  document.addEventListener("resize", () => {
    if (window.innerWidth < 768 && !initialized) {
      initScrollHandler();
    } else {
      initialized = false;
    }
  });
</script>
